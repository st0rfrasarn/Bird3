volatile uint16_t torque = 0;
volatile bool rearLight = false;
volatile bool unlockBattery = false;
volatile bool brakeEnabled = false;
volatile int keepAliveIndex = 0;
uint8_t keepaliveCodes[41][8] = {
  { 0x01, 0x00, 0xdd, 0x00, 0xcc, 0x35, 0xe0, 0x26 },
  { 0x02, 0x00, 0xdd, 0x43, 0xb3, 0x02, 0x40, 0x8b },
  { 0x03, 0x00, 0xdd, 0x43, 0x05, 0x46, 0x0f, 0x6c },
  { 0x04, 0x00, 0xdd, 0x43, 0x34, 0xe5, 0x5e, 0x8d },
  { 0x05, 0x00, 0xdd, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x06, 0x00, 0x83, 0x43, 0xb1, 0x49, 0xc5, 0xa3 },
  { 0x07, 0x00, 0x5f, 0x43, 0x66, 0xc8, 0x35, 0xf4 },
  { 0x08, 0x00, 0x59, 0x43, 0xe1, 0xfd, 0x31, 0xfa },
  { 0x09, 0x00, 0xc4, 0x43, 0x76, 0xc7, 0x18, 0xe0 },
  { 0x0a, 0x00, 0x64, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x0b, 0x00, 0x13, 0x43, 0x01, 0x2a, 0x41, 0xa7 },
  { 0x0c, 0x00, 0x44, 0x43, 0x14, 0x5b, 0x5e, 0x3a },
  { 0x0d, 0x00, 0x07, 0x43, 0xba, 0x86, 0xf7, 0x96 },
  { 0x0e, 0x00, 0xee, 0x43, 0x11, 0x3c, 0x37, 0x6a },
  { 0x0f, 0x00, 0xd0, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x10, 0x00, 0xc5, 0x43, 0xd6, 0x30, 0x20, 0x92 },
  { 0x11, 0x00, 0xb6, 0x43, 0x4c, 0xa9, 0xf2, 0x89 },
  { 0x12, 0x00, 0x70, 0x43, 0xf2, 0x1d, 0x15, 0x2a },
  { 0x13, 0x00, 0x23, 0x43, 0x05, 0x87, 0xa9, 0x46 },
  { 0x14, 0x00, 0x71, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x15, 0x00, 0x9c, 0x43, 0x79, 0x0a, 0x38, 0x91 },
  { 0x16, 0x00, 0xb6, 0x43, 0xa4, 0xb7, 0xf0, 0x76 },
  { 0x17, 0x00, 0x80, 0x43, 0xe4, 0xaf, 0x27, 0xfb },
  { 0x18, 0x00, 0x75, 0x43, 0x5c, 0x80, 0x47, 0xa3 },
  { 0x19, 0x00, 0x0f, 0x43, 0x03, 0x57, 0x43, 0x41 },
  { 0x1a, 0x00, 0x2f, 0x43, 0x8a, 0xa3, 0x4c, 0x6c },
  { 0x1b, 0x00, 0x21, 0x43, 0x36, 0xe7, 0x21, 0xc3 },
  { 0x1c, 0x00, 0x0f, 0x43, 0x79, 0xc0, 0xab, 0xba },
  { 0x1d, 0x00, 0x29, 0x43, 0xb6, 0x44, 0x3b, 0xce },
  { 0x1e, 0x00, 0x6a, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x1f, 0x00, 0xfc, 0x43, 0x66, 0x48, 0x45, 0xc7 },
  { 0x20, 0x00, 0xb5, 0x43, 0xc9, 0xfa, 0xdd, 0x9f },
  { 0x21, 0x00, 0xbf, 0x43, 0x68, 0x9b, 0x32, 0x4c },
  { 0x22, 0x00, 0x9b, 0x43, 0xeb, 0x43, 0xdf, 0x90 },
  { 0x23, 0x00, 0xf7, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x24, 0x00, 0x4c, 0x43, 0x96, 0x3c, 0x96, 0x04 },
  { 0x25, 0x00, 0xe2, 0x43, 0x48, 0x2f, 0x34, 0xb5 },
  { 0x26, 0x00, 0xdc, 0x43, 0x27, 0xfc, 0x06, 0xb0 },
  { 0x27, 0x00, 0xf5, 0x43, 0xd7, 0x21, 0x01, 0x97 },
  { 0x28, 0x00, 0xd7, 0x43, 0x28, 0x00, 0x2a, 0x00 },
  { 0x29, 0x00, 0x39, 0x43, 0xcd, 0x3c, 0x36, 0x2c }
};
uint8_t BMSOutputEnable[8] = { 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t BMSOutputDisable[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t RearLightEnable[8] = { 0x00, 0x00, 0x00 };
uint8_t RearLightDisable[8] = { 0x01, 0x00, 0x00 };
uint8_t ThrottlePin = A0;

#define ThrottleADCMin 1100
#define ThrottleADCMax 3100

// https://deepbluembedded.com/esp32-timers-timer-interrupt-tutorial-arduino-ide/
hw_timer_t *twoMSTimer = NULL;
volatile uint16_t timerCounter;
#define timerCounterMax 5000
#define timerIntervalMS 2

#define FILTER_LEN 50

uint32_t AN_Pot1_Buffer[FILTER_LEN] = { 0 };
int AN_Pot1_i = 0;
int AN_Pot1_Raw = 0;
int AN_Pot1_Filtered = 0;

uint32_t readADC_Avg(int ADC_Raw) {
  int i = 0;
  uint32_t Sum = 0;

  AN_Pot1_Buffer[AN_Pot1_i++] = ADC_Raw;
  if (AN_Pot1_i == FILTER_LEN) {
    AN_Pot1_i = 0;
  }
  for (i = 0; i < FILTER_LEN; i++) {
    Sum += AN_Pot1_Buffer[i];
  }
  return (Sum / FILTER_LEN);
}


void loop() {
  // put your main code here, to run repeatedly:
  AN_Pot1_Raw = analogRead(ThrottlePin);
  auto avg = readADC_Avg(AN_Pot1_Raw);
  if (avg < ThrottleADCMin) {
    avg = 0;
  } else {
    avg -= ThrottleADCMin;
  }
  auto throttle = min(avg * 1000 / (ThrottleADCMax - ThrottleADCMin), (uint)1000);
  torque = throttle;
}

void sendMotorTorque() {
}

void sendKeepAlive() {
  //Serial.println("keepalive");
}

void sendBMSEnable() {
  Serial.println("BMS");
  Serial.print("Torque: ");
  Serial.println(torque);
}

void sendRearLight() {
  //Serial.println("rear light");
}

void IRAM_ATTR Timer0_ISR() {
  // This timer runs every 2ms in order to send the current motor speed.
  // There are other things we need to do, but since the ESP32 has a limited
  // number of timers, we don't wish to use them all for the various messages
  // we need to send at different intervals. Instead, we simply increment a
  // variable and check if it's divisible by the desired interval.

  sendMotorTorque();

  // Every 50 ms
  if (timerCounter % 50 == 0) {
    sendRearLight();
  }

  // Every 200 ms
  if (timerCounter % 200 == 0) {
    sendBMSEnable();
  }

  // Every 1000 ms
  if (timerCounter % 1000 == 0) {
    sendKeepAlive();
  }

  timerCounter += timerIntervalMS;
  if (timerCounter > timerCounterMax) {
    timerCounter = 0;
  }
}

void setup() {
  Serial.begin(115200);
  // put your setup code here, to run once:
  analogReadResolution(12);

  // Setup the timer https://deepbluembedded.com/esp32-timers-timer-interrupt-tutorial-arduino-ide/
  twoMSTimer = timerBegin(0, 80, true);
  timerAttachInterrupt(twoMSTimer, &Timer0_ISR, true);
  timerAlarmWrite(twoMSTimer, timerIntervalMS * 1000, true);
  timerAlarmEnable(twoMSTimer);
}
